"""PDF report generation using reportlab."""
from __future__ import annotations

from pathlib import Path
from typing import Dict

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.units import mm
from reportlab.platypus import Image, PageBreak, Paragraph, SimpleDocTemplate, Spacer, Table, TableStyle


def _ensure_output_dir(path: str | Path) -> Path:
    directory = Path(path)
    directory.mkdir(parents=True, exist_ok=True)
    return directory


def _header_footer(canvas, doc, project_name: str):  # pragma: no cover - relies on reportlab canvas
    canvas.saveState()
    canvas.setFont("Helvetica-Bold", 11)
    canvas.drawString(20 * mm, A4[1] - 20 * mm, f"{project_name} – Skylon Elements")
    canvas.setFont("Helvetica", 9)
    canvas.drawString(20 * mm, 15 * mm, "Generated by Skylon Elements – Sash Window Designer v1.0")
    canvas.drawRightString(A4[0] - 20 * mm, 15 * mm, f"Page {canvas.getPageNumber()}")
    canvas.restoreState()


def _build_spec_page(styles, project, window_data):
    story = []
    story.append(Paragraph("Window Specification", styles["Title"]))
    story.append(Spacer(1, 12))

    spec_table_data = [
        ["Project", project["name"]],
        ["Client", project["client_name"]],
        ["Date", project["created_at"].strftime("%Y-%m-%d")],
        ["Frame Width", f"{window_data['window']['frame']['width']} mm"],
        ["Frame Height", f"{window_data['window']['frame']['height']} mm"],
        ["Paint Color", window_data["hardware"]["paint_color"]],
        ["Hardware Finish", window_data["hardware"]["hardware_finish"]],
        ["Trickle Vent", window_data["hardware"]["trickle_vent"]],
        ["Cill Extension", f"{window_data['window']['cill_extension']} mm"],
        ["Glass Type", window_data["glass"]["type"]],
        [
            "Bars Layout",
            f"{window_data['bars']['vertical_bars']}x{window_data['bars']['horizontal_bars']} ({window_data['bars']['layout_type']})",
        ],
        ["Spacer Color", window_data["glass"]["spacer_color"]],
    ]

    table = Table(spec_table_data, colWidths=[70 * mm, 90 * mm])
    table.setStyle(
        TableStyle(
            [
                ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
                ("GRID", (0, 0), (-1, -1), 0.25, colors.grey),
                ("FONTNAME", (0, 0), (-1, -1), "Helvetica"),
                ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
                ("ALIGN", (0, 0), (-1, -1), "LEFT"),
            ]
        )
    )
    story.append(table)
    return story


def _build_cutting_list_page(styles, materials):
    story = [Paragraph("Cutting List", styles["Title"]), Spacer(1, 12)]

    data = [["Section", "Qty", "Length (mm)", "Wood Type"]]
    for item in materials:
        data.append([item["section"], item["qty"], item["length"], item["wood_type"]])

    table = Table(data, colWidths=[50 * mm, 25 * mm, 35 * mm, 50 * mm])
    table.setStyle(
        TableStyle(
            [
                ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
                ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#e0e0e0")),
                ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
            ]
        )
    )
    story.append(table)
    story.append(Spacer(1, 12))
    story.append(Paragraph("Totals", styles["Heading2"]))
    total_length = sum(item["length"] * item["qty"] for item in materials)
    story.append(Paragraph(f"Total Timber Length: {total_length:.2f} mm", styles["Normal"]))
    return story


def _build_shopping_list_page(styles):
    story = [Paragraph("Shopping List", styles["Title"]), Spacer(1, 12)]
    items = [
        ("Sash Cord", "2", "6mm Cotton Core"),
        ("Weights", "4", "3.5 kg"),
        ("Pulleys", "4", "Brass"),
        ("Locks", "2", "PAS24"),
        ("Vent", "1", "Concealed"),
        ("Paint", "1", "Teknos AquaTop"),
    ]

    data = [["Item", "Qty", "Specification"]] + [list(item) for item in items]
    table = Table(data, colWidths=[50 * mm, 20 * mm, 70 * mm])
    table.setStyle(
        TableStyle(
            [
                ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
                ("BACKGROUND", (0, 0), (-1, 0), colors.HexColor("#d9edf7")),
                ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
            ]
        )
    )
    story.append(table)
    return story


def _build_technical_page(styles, drawing_path: str):
    story = [Paragraph("Technical Drawing", styles["Title"]), Spacer(1, 12)]
    if drawing_path and Path(drawing_path).exists():
        img = Image(drawing_path, width=130 * mm, height=160 * mm)
        story.append(img)
        story.append(Spacer(1, 12))
    story.append(Paragraph("Window Geometry Diagram – not to scale", styles["Italic"]))
    return story


def generate_pdf(project_data: Dict[str, object], drawings: Dict[str, str], export_dir: str = "output") -> str:
    """Generate a comprehensive PDF report."""

    project = project_data["project"]
    if not project_data["windows"]:
        raise ValueError("Project contains no windows to include in the PDF report.")
    first_window = project_data["windows"][0]

    output_directory = _ensure_output_dir(export_dir)
    file_path = output_directory / f"{project['name'].replace(' ', '_').lower()}_report.pdf"

    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="Italic", parent=styles["Normal"], fontName="Helvetica-Oblique"))

    doc = SimpleDocTemplate(str(file_path), pagesize=A4)

    story = []
    story.extend(_build_spec_page(styles, project, first_window))
    story.append(PageBreak())
    story.extend(_build_cutting_list_page(styles, first_window["materials"]))
    story.append(PageBreak())
    story.extend(_build_shopping_list_page(styles))
    story.append(PageBreak())
    drawing_path = drawings.get(first_window["window"]["id"])
    story.extend(_build_technical_page(styles, drawing_path))

    doc.build(story, onFirstPage=lambda canvas, doc: _header_footer(canvas, doc, project["name"]),
              onLaterPages=lambda canvas, doc: _header_footer(canvas, doc, project["name"]))

    return str(file_path)
