"""
PDF report generation using reportlab
Creates professional A4 reports with specifications, cutting lists, and drawings
"""

import os
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import mm
from reportlab.platypus import (
    SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer,
    PageBreak, Image, KeepTogether
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from models import Project, Window
from calculations import get_cutting_list, get_shopping_list
from drawings import draw_window


def create_pdf_report(project: Project, window: Window, output_path: str = None) -> str:
    """
    Create comprehensive PDF report for a window

    Args:
        project: Project object
        window: Window object to report on
        output_path: Optional output path (default: output/{window_name}_report.pdf)

    Returns:
        Path to created PDF file
    """
    if output_path is None:
        output_path = f"output/{window.name}_report.pdf"

    # Create PDF document
    doc = SimpleDocTemplate(
        output_path,
        pagesize=A4,
        rightMargin=20*mm,
        leftMargin=20*mm,
        topMargin=20*mm,
        bottomMargin=20*mm
    )

    # Container for the 'Flowable' objects
    elements = []

    # Add all pages
    elements.extend(create_specification_page(project, window))
    elements.append(PageBreak())

    elements.extend(create_cutting_list_page(window))
    elements.append(PageBreak())

    elements.extend(create_shopping_list_page(window))
    elements.append(PageBreak())

    elements.extend(create_drawing_page(window))

    # Build PDF
    doc.build(elements, onFirstPage=add_page_decoration, onLaterPages=add_page_decoration)

    print(f"PDF report created: {output_path}")
    return output_path


def add_page_decoration(canvas, doc):
    """Add header and footer to each page"""
    canvas.saveState()

    # Footer
    footer_text = "Generated by Skylon Elements â€“ Sash Window Designer v1.0"
    canvas.setFont('Helvetica', 8)
    canvas.setFillColor(colors.grey)
    canvas.drawCentredString(A4[0] / 2, 15*mm, footer_text)

    # Page number
    page_num = canvas.getPageNumber()
    canvas.drawRightString(A4[0] - 20*mm, 15*mm, f"Page {page_num}")

    canvas.restoreState()


def create_specification_page(project: Project, window: Window) -> list:
    """Create specification page"""
    elements = []
    styles = getSampleStyleSheet()

    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=30,
        alignment=TA_CENTER
    )

    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#2c3e50'),
        spaceAfter=12,
        spaceBefore=12
    )

    # Title
    elements.append(Paragraph(f"Window Specification", title_style))
    elements.append(Paragraph(f"{window.name}", styles['Heading2']))
    elements.append(Spacer(1, 10*mm))

    # Project information
    project_info = [
        ['Project:', project.name],
        ['Client:', project.client_name],
        ['Date:', project.created_at.strftime('%Y-%m-%d %H:%M')],
    ]

    project_table = Table(project_info, colWidths=[40*mm, 120*mm])
    project_table.setStyle(TableStyle([
        ('FONT', (0, 0), (-1, -1), 'Helvetica', 10),
        ('FONT', (0, 0), (0, -1), 'Helvetica-Bold', 10),
        ('TEXTCOLOR', (0, 0), (-1, -1), colors.HexColor('#2c3e50')),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ('TOPPADDING', (0, 0), (-1, -1), 3),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
    ]))
    elements.append(project_table)
    elements.append(Spacer(1, 8*mm))

    # Window specifications table
    elements.append(Paragraph("Window Specifications", heading_style))

    specs_data = [
        ['Parameter', 'Value'],
        ['Frame Width', f"{window.frame.width:.1f} mm"],
        ['Frame Height', f"{window.frame.height:.1f} mm"],
        ['Paint Color', window.paint_color],
        ['Hardware Finish', window.hardware_finish],
        ['Trickle Vent', window.trickle_vent],
        ['Sash Catches', window.sash_catches],
        ['Cill Extension', f"{window.cill_extension} mm"],
        ['Glass Type', window.glass_top.type],
        ['Spacer Color', window.glass_top.spacer_color],
        ['Bars Layout', window.bars_top.layout_type],
        ['Toughened Glass', 'Yes' if window.glass_top.toughened else 'No'],
        ['Frosted Glass', 'Yes' if window.glass_top.frosted else 'No'],
    ]

    specs_table = Table(specs_data, colWidths=[60*mm, 100*mm])
    specs_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495e')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold', 11),
        ('FONT', (0, 1), (0, -1), 'Helvetica-Bold', 10),
        ('FONT', (1, 1), (1, -1), 'Helvetica', 10),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.grey),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#ecf0f1')]),
        ('TOPPADDING', (0, 0), (-1, -1), 6),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
    ]))
    elements.append(specs_table)
    elements.append(Spacer(1, 8*mm))

    # Dimension details
    elements.append(Paragraph("Detailed Dimensions", heading_style))

    dimensions_data = [
        ['Component', 'Measurement', 'Value'],
        ['Frame', 'Jambs Length', f"{window.frame.jambs_length:.1f} mm"],
        ['Frame', 'Ext Head Liner', f"{window.frame.ext_head_liner:.1f} mm"],
        ['Frame', 'Int Head Liner', f"{window.frame.int_head_liner:.1f} mm"],
        ['Top Sash', 'Width', f"{window.sash_top.width:.1f} mm"],
        ['Top Sash', 'Height (with horn)', f"{window.sash_top.height_with_horn:.1f} mm"],
        ['Top Glass', 'Width x Height', f"{window.glass_top.width:.1f} x {window.glass_top.height:.1f} mm"],
        ['Bottom Sash', 'Width', f"{window.sash_bottom.width:.1f} mm"],
        ['Bottom Sash', 'Height (with horn)', f"{window.sash_bottom.height_with_horn:.1f} mm"],
        ['Bottom Glass', 'Width x Height', f"{window.glass_bottom.width:.1f} x {window.glass_bottom.height:.1f} mm"],
    ]

    dimensions_table = Table(dimensions_data, colWidths=[40*mm, 60*mm, 60*mm])
    dimensions_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495e')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold', 11),
        ('FONT', (0, 1), (-1, -1), 'Helvetica', 9),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.grey),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#ecf0f1')]),
        ('TOPPADDING', (0, 0), (-1, -1), 4),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
    ]))
    elements.append(dimensions_table)

    return elements


def create_cutting_list_page(window: Window) -> list:
    """Create cutting list page"""
    elements = []
    styles = getSampleStyleSheet()

    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=20,
        alignment=TA_CENTER
    )

    elements.append(Paragraph(f"Cutting List - {window.name}", title_style))
    elements.append(Spacer(1, 10*mm))

    cutting_list = get_cutting_list(window)

    # Create table data
    table_data = [['Section', 'Qty', 'Length (mm)', 'Wood Type']]
    total_length = 0

    for item in cutting_list:
        table_data.append([
            item['section'],
            str(item['qty']),
            f"{item['length']:.1f}",
            item['wood_type']
        ])
        total_length += item['length'] * item['qty']

    # Add total row
    table_data.append(['TOTAL LINEAR LENGTH', '', f"{total_length:.1f} mm", f"{total_length/1000:.2f} m"])

    # Create table
    cutting_table = Table(table_data, colWidths=[70*mm, 20*mm, 35*mm, 35*mm])
    cutting_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495e')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold', 11),
        ('FONT', (0, 1), (-1, -2), 'Helvetica', 10),
        ('FONT', (0, -1), (-1, -1), 'Helvetica-Bold', 10),
        ('ALIGN', (1, 0), (-1, -1), 'CENTER'),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.grey),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),
        ('ROWBACKGROUNDS', (0, 1), (-1, -2), [colors.white, colors.HexColor('#ecf0f1')]),
        ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#f39c12')),
        ('TEXTCOLOR', (0, -1), (-1, -1), colors.white),
        ('TOPPADDING', (0, 0), (-1, -1), 6),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
    ]))

    elements.append(cutting_table)

    return elements


def create_shopping_list_page(window: Window) -> list:
    """Create shopping list page"""
    elements = []
    styles = getSampleStyleSheet()

    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=20,
        alignment=TA_CENTER
    )

    elements.append(Paragraph(f"Shopping List - {window.name}", title_style))
    elements.append(Spacer(1, 10*mm))

    shopping_list = get_shopping_list(window)

    # Create table data
    table_data = [['Item', 'Qty', 'Specification']]

    for item in shopping_list:
        table_data.append([
            item['item'],
            str(item['qty']),
            item['specification']
        ])

    # Create table
    shopping_table = Table(table_data, colWidths=[50*mm, 20*mm, 90*mm])
    shopping_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#34495e')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('FONT', (0, 0), (-1, 0), 'Helvetica-Bold', 11),
        ('FONT', (0, 1), (-1, -1), 'Helvetica', 10),
        ('ALIGN', (1, 0), (1, -1), 'CENTER'),
        ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ('ALIGN', (2, 0), (2, -1), 'LEFT'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('INNERGRID', (0, 0), (-1, -1), 0.25, colors.grey),
        ('BOX', (0, 0), (-1, -1), 0.5, colors.black),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.HexColor('#ecf0f1')]),
        ('TOPPADDING', (0, 0), (-1, -1), 6),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
    ]))

    elements.append(shopping_table)

    return elements


def create_drawing_page(window: Window) -> list:
    """Create technical drawing page"""
    elements = []
    styles = getSampleStyleSheet()

    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=20,
        textColor=colors.HexColor('#1a1a1a'),
        spaceAfter=20,
        alignment=TA_CENTER
    )

    elements.append(Paragraph(f"Technical Drawing - {window.name}", title_style))
    elements.append(Spacer(1, 5*mm))

    # Generate drawing
    drawing_path = f"output/{window.name}_drawing_temp.png"
    draw_window(window, drawing_path)

    # Add image to PDF
    if os.path.exists(drawing_path):
        img = Image(drawing_path, width=140*mm, height=210*mm, kind='proportional')
        elements.append(img)

        # Caption
        caption_style = ParagraphStyle(
            'Caption',
            parent=styles['Normal'],
            fontSize=9,
            textColor=colors.grey,
            alignment=TA_CENTER,
            spaceAfter=12
        )
        elements.append(Spacer(1, 3*mm))
        elements.append(Paragraph("Window Geometry Diagram â€“ not to scale", caption_style))

    return elements


def create_project_report(project: Project, output_path: str = None) -> str:
    """
    Create comprehensive PDF report for entire project

    Args:
        project: Project object
        output_path: Optional output path

    Returns:
        Path to created PDF file
    """
    if output_path is None:
        output_path = f"output/{project.name.replace(' ', '_')}_project_report.pdf"

    # Create reports for each window
    for window in project.windows:
        window_path = f"output/{window.name}_report.pdf"
        create_pdf_report(project, window, window_path)

    print(f"Project reports created for all windows")
    return output_path
